[
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "maybout.github.io",
    "section": "",
    "text": "This is Maelle’s website."
  },
  {
    "objectID": "30DayChartChallenge.html",
    "href": "30DayChartChallenge.html",
    "title": "30DayChartChallenge",
    "section": "",
    "text": "https://www.cedricscherer.com/2024/04/01/contributions-30daychartchallenge-2024/\n\n\nHere is my project of the 30 Day Chart Challenge using R while trying to bring good data and understand better about visualization and the different graphs you can use… Come learn with me and watch my evolution creating graphs !\n\nSetup of package installation :\n\n\nShow the code\nif (!\"librarian\" %in% installed.packages())\ninstall.packages(\"librarian\")\nlibrarian::shelf(ggplot2, zmeers / ggparliament, tidyr, viridis, patchwork, dplyr, readxl, plotly, rworldmap)\n\n\n\n\nDay 1 : Part to Whole\n\n\nShow the code\nlibrary(ggparliament)\nlibrary(tidyverse)\n\nseats &lt;- c(51, 188, 52, 68, 219, 73, 42, 35, 23)\n\nnames_party &lt;- c(\"The European United Left/Nordic Green Left\",\n                 \"Progressive Alliance of Socialists and Democrats\",\n                 \"Greens/European Free Alliance\",\n                 \"Alliance of Liberals and Democrats for Europe\",\n                 \"The European Peoples Party\",\n                 \"European Conservatives and Reformists\",\n                 \"Europe of Freedom and Direct Democracy\",\n                 \"Europe of Nations and Freedom\",\n                 \"Non-attached members\")\n\n# Colours of the different party using https://htmlcolorcodes.com/fr/\nparty_colours &lt;- c(\"#C0392B\", \"#E74C3C\", \"#52BE80\", \"#F4D03F\", \"#21618C\", \"#3498DB\", \"#984EA3\", \"#707B7C\", \"#999999\")\n\n# Abbreviated column for the party\nparty &lt;- c(\"GUE/NGL\", \"S&D\", \"Greens/EFA\", \"ALDE\", \"EPP\", \"ECR\", \"EFDD\", \"ENF\", \"NA\")\n\n# Creation of the data frame\neuropeen &lt;- data.frame(\n  party = party,\n  seats = seats,\n  mycol = party_colours\n)\n\n# Creation of data for the semicircle plot\neuropeen_semicircle &lt;- parliament_data(election_data = europeen, type = \"semicircle\", parl_rows = 14, party_seats = europeen$seats)\n\n# Creation of plot\nggplot(europeen_semicircle, aes(x = x, y = y, colour = party)) +\n  geom_parliament_seats(size = 2.5)  +\n  theme_ggparliament() +\n  labs(title = \"Europeen Parlement, 2024\") +\n  scale_colour_manual(values = party_colours, \n                      limits = party)\n\n\n\n\n\n\n\n\n\n\n\nDay 2 : Neo\n\n\nShow the code\nlibrary(ggplot2)\n\n\nNaissance &lt;- data.frame(\n  Country = c(\"European Union\", \"Austria\", \"Belgium\", \"Bulgaria\", \"Croatia\",\n              \"Cyprus\", \"Czech Republic\", \"Denmark\",\"Estonia\", \"Finland\",\n              \"France\", \"Germany\", \"Greece\", \"Hungary\", \"Ireland\", \"Italy\", \n              \"Latvia\", \"Lithuania\", \"Luxembourg\", \"Netherlands\", \"Poland\",\n              \"Portugal\", \"Romania\", \"Slovakia\", \"Slovenia\", \"Spain\", \n              \"Sweden\", \"Norway\", \"Russia\", \"Switzerland\", \"United Kingdom\", \n              \"Australia\", \"Canada\", \"Chile\", \"Colombia\",\n              \"Israel\", \"Japan\", \"Mexico\", \"New-Zealand\", \"South Korea\",\n              \"Turkey\", \"United States\"),\n  Birth_rate_2022 = c(8.7, 9.1, 9.8, 8.8, 8.8, 11.1, 9.5, 9.9, 8.6, 8.1, 10.6,\n                      8.8, 7.3, 9.3, 11.2, 6.7, 8.5, 7.8, 9.9,\n                      9.5, 8.3, 8.0, 9.6, 9.7, 8.3, 6.9, 10.0, 9.4, 9.6, 9.4,\n                      10.7, 11.5, 9.8, 11.8, 14.2, 19.6, 6.6, \n                      14.9, 12.4, 5.6, 14.7, 11.1)\n  )\n\n# Creation of plot \nggplot(Naissance, aes(x = reorder(Country, Birth_rate_2022), y = Birth_rate_2022, fill = Birth_rate_2022)) +\n  geom_bar(stat = \"identity\") +\n  coord_flip() +\n  scale_fill_gradient(low = \"skyblue\", high = \"darkblue\") +\n  labs(title = \"Birth rate by Country in 2022\", x = \"Country\", y = \"Birth rate\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\n\n\nDay 3 : Makeover\nFirst plot for makeover\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\nGHG &lt;- data.frame( Sectors = c(\"Energy industry\", \"Manufacturing industry\",\n\"Waste treatment\", \"Residential activities\",\n\"Agriculture\", \"Road transport\", \"Other transport\", \"Total\"),\n  \n  `2017` = c(57.3, 82.9, 15.1, 84.1, 81.3, 130, 8, 459),\n  `2018` = c(48, 82.8, 14.8, 79, 80.4, 127, 8.1, 440),\n  `2019` = c(46.2, 79.8, 16, 76, 78.6, 126, 8.2, 431),\n  `2020` = c(41.3, 72, 15.9, 71.3, 78.2, 107, 6.2, 392),\n  `2021` = c(42.5, 78, 15.2, 75.1, 76.5, 120, 7.1, 415),\n  `2022` = c(44.6, 73, 15.2, 64, 76.5, 122, 8.1, 404))\n\nGHG_long &lt;- GHG %&gt;%\n  pivot_longer(\n    cols = starts_with(\"X\"),\n    names_to = \"Years\",\n    values_to = \"Emissions\"\n    )\n\nneon_colors &lt;- c(\"#AEC6CF\", \"#FFB347\", \"#77DD77\", \"#FF6961\", \"#CFCFC4\", \"#F49AC2\", \"#FFD1DC\")\n\n# Creation of plot\nggplot(GHG_long, aes(x = Emissions, y = reorder(Sectors, Emissions), fill = Years)) +\n  geom_bar(stat = \"identity\", position = \"dodge\") +\n  scale_fill_manual(values = neon_colors, name = \"Years\") +\n  theme_minimal() +\n  labs(\n    title = \"Greenhouse gas emissions by sectors\", \n    subtitle = \"(In France)\",\n    x = \"Emissions (Mt CO2 equivalent)\",\n    y = \"Sectors/ Activity\"\n    )\n\n\n\n\n\n\n\n\n\nSecond Plot - using stacked bars\n\n\nShow the code\n# Load required packages\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(tidyr)\n\n# Data definition\nGHG &lt;- data.frame( \n  Sectors = c(\"Energy industry\", \"Manufacturing industry\",\n             \"Waste treatment\", \"Residential activities\",\n             \"Agriculture\", \"Other transport\", \"Road transport\"),\n\n`2017` = c(57.3, 82.9, 15.1, 84.1, 81.3, 8, 130),\n`2018` = c(48, 82.8, 14.8, 79, 80.4, 8.1, 127),\n`2019` = c(46.2, 79.8, 16, 76, 78.6, 8.2, 126),\n`2020` = c(41.3, 72, 15.9, 71.3, 78.2, 6.2, 107),\n`2021` = c(42.5, 78, 15.2, 75.1, 76.5, 7.1, 120),\n`2022` = c(44.6, 73, 15.2, 64, 76.5, 8.1, 122)\n)\n# Pivoter les données pour avoir une colonne Annee, Secteur, et Emissions\nGHG_long &lt;- GHG %&gt;%\npivot_longer(cols = -Sectors, names_to = \"Years\", values_to = \"Emissions\")\n\n# Personalized colours for each activity or sector\nsector_colors &lt;- c(\"#AEC6CF\", \"#FFB347\", \"#77DD77\", \"#FF6961\", \"#CFCFC4\", \"#F49AC2\", \"#FFD1DC\")\n\n# Creation of plot\nggplot(GHG_long, aes(x = Years, y = Emissions, fill = Sectors)) +\ngeom_bar(stat = \"identity\", position = \"stack\") +\nscale_fill_manual(values = sector_colors) +\nlabs(\n  title = \"Greenhouse gas emissions by sectors\",\n  x = \"Years\",\n  y = \"Emissions (Mt CO2 equivalent)\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nThis shows the importance of choosing the right graph for certain data for better visualization.\n\n\nDay 4 : Waffle\n\n\nShow the code\nlibrary(waffle)\nlibrary(ggplot2)\n\nEnergie &lt;- c(\"Renewable\", \"Hydropower\", \"Nuclear\", \"Natural Gas\", \"Coal\", \"Oil\")\nstats &lt;- c(10.8, 15.7, 10.7, 23.5, 36.7, 2.8)\nyey &lt;- data.frame(Energie = Energie, stats = stats)\n\ncolors &lt;- c(\"#66c2a5\", \"#fc8d62\", \"#8da0cb\", \"#e78ac3\", \"#a6d854\", \"#ffd92f\")\n\nparts &lt;- setNames(yey$stats, yey$Energie)\n\nwaffle_chart &lt;- waffle(\nparts = parts,          \nrows = 10,            \nsize = 0.5,            \ncolors = colors         \n) +\nggtitle(\"Energy used to generate electricity worldwide\") +  \nlabs(caption = \"Source: Hello Watt\") +  \ntheme(\nplot.title = element_text(size = 12, face = \"bold\", hjust = 0.6),\nlegend.title = element_blank(),\nlegend.text = element_text(size = 12),\nlegend.position = \"bottom\",\nplot.caption = element_text(size = 10, face = \"italic\"),\nplot.title.position = \"plot\",  \nplot.margin = margin(10, 10, 10, 10)\n)\n\nprint(waffle_chart)\n\n\n\n\n\n\n\n\n\n\n\nDay 5 : Diverging\nFor the time being, this is from a GitHub example using the networkD3 package. Reference\nThis graph shows the migration from one country (left) to another (right).\n\n\nShow the code\n# Libraries\nlibrary(tidyverse)\nlibrary(viridis)\nlibrary(patchwork)\nlibrary(hrbrthemes)\nlibrary(circlize)\n\n# Load dataset from github, \n# let's give it a better name than data.\n\nimmidata &lt;- read.table(\"https://raw.githubusercontent.com/holtzy/data_to_viz/master/Example_dataset/13_AdjacencyDirectedWeighted.csv\", header=TRUE)\n# Package we need here \nlibrary(networkD3)\n\n# We need a long format\nimmidata_long &lt;- immidata %&gt;%\n  rownames_to_column %&gt;%\n  gather(key = 'key', value = 'value', -rowname) %&gt;%\n  filter(value &gt; 0)\ncolnames(immidata_long) &lt;- c(\"source\", \"target\", \"value\")\nimmidata_long$target &lt;- paste(immidata_long$target, \" \", sep=\"\")\n\n# From these flows we need to create a node data frame: it lists every entities involved in the flow\nnodes &lt;- data.frame(name=c(as.character(immidata_long$source), as.character(immidata_long$target)) %&gt;% unique())\n\n# With networkD3, connection must be provided using id, not using real name like in the links dataframe.. So we need to reformat it.\nimmidata_long$IDsource=match(immidata_long$source, nodes$name)-1\nimmidata_long$IDtarget=match(immidata_long$target, nodes$name)-1\n\n# prepare colour scale\nColourScal ='d3.scaleOrdinal() .range([\"#FDE725FF\",\"#B4DE2CFF\",\"#6DCD59FF\",\"#35B779FF\",\"#1F9E89FF\",\"#26828EFF\",\"#31688EFF\",\"#3E4A89FF\",\"#482878FF\",\"#440154FF\"])'\n\n# Make the Network\nsankeyNetwork(Links = immidata_long, Nodes = nodes,\n              Source = \"IDsource\", Target = \"IDtarget\",\n              Value = \"value\", NodeID = \"name\",\n              sinksRight=FALSE, colourScale=ColourScal, nodeWidth=40, fontSize=13, nodePadding=20)\n\n\n\n\n\n\nShow the code\n#https://www.data-to-viz.com/graph/sankey.html\n\n\n\n\nDay 6 : OECD\n\n\nShow the code\nlibrary(readxl)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(plotly)\n\nOECD &lt;- read_excel(\"../Rwork/30DayChartChallenge/OECDmigration.xlsx\")\n\n# Renommer la colonne et filtrer les lignes non nulles\nmigration_data &lt;- rename(OECD, Country = 1)\nmigration_data &lt;- filter(migration_data, !is.na(Country))\n\n# Convertir les données en format long\nmigration_long &lt;- pivot_longer(migration_data, -Country, names_to = \"Year\", values_to = \"Value\")\n\n# Convertir les colonnes Year et Value en numériques\nmigration_long$Year &lt;- as.numeric(migration_long$Year)\nmigration_long$Value &lt;- as.numeric(gsub(\",\", \"\", migration_long$Value))\n\n# Créer le graphique avec ggplot2\np &lt;- ggplot(migration_long, aes(x = Year, y = Value, color = Country, group = Country, text = paste(\"Country:\", Country, \"&lt;br&gt;Year:\", Year, \"&lt;br&gt;Value:\", Value))) +\ngeom_line() +\ntheme_minimal() +\nlabs(title = \"Chronological Chart of International migration\",\nx = \"Year\",\ny = \"People\") +\nscale_x_continuous(breaks = seq(min(migration_long$Year), max(migration_long$Year), by = 1)) +  # Forcer l'affichage de toutes les années\ntheme(legend.position = \"none\")  # Suppression de la légende\n\n#Convertir le graphique ggplot2 en graphique plotly interactif\np_interactive &lt;- ggplotly(p, tooltip = \"text\")\n\n# Afficher le graphique interactif\np_interactive\n\n\n\n\n\n\n\n\nShow the code\nlibrary(readxl)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(plotly)\n\nOECD2 &lt;- read_excel(\"../Rwork/30DayChartChallenge/OECD2.xlsx\")\n\n# Renommer la colonne et filtrer les lignes non nulles\nmigration_data &lt;- rename(OECD2, Country = 1)\nmigration_data &lt;- filter(migration_data, !is.na(Country))\n\n# Convertir les données en format long\nmigration_long &lt;- pivot_longer(migration_data, -Country, names_to = \"Year\", values_to = \"Value\")\n\n# Convertir les colonnes Year et Value en numériques\nmigration_long$Year &lt;- as.numeric(migration_long$Year)\nmigration_long$Value &lt;- as.numeric(gsub(\",\", \"\", migration_long$Value))\n\n# Créer le graphique avec ggplot2\np &lt;- ggplot(migration_long, aes(x = Year, y = Value, color = Country, group = Country, text = paste(\"Country:\", Country, \"&lt;br&gt;Year:\", Year, \"&lt;br&gt;Value:\", Value))) +\n  geom_line() +\n  theme_minimal() +\n  labs(title = \"Chronological Chart of International migration\",\n       x = \"Year\",\n       y = \"Proportion of migrants on the total population\") +\n  scale_x_continuous(breaks = seq(min(migration_long$Year), max(migration_long$Year), by = 1)) +  # Forcer l'affichage de toutes les années\n  theme(legend.position = \"none\")  # Suppression de la légende\n\n#Convertir le graphique ggplot2 en graphique plotly interactif\np_interactive &lt;- ggplotly(p, tooltip = \"text\")\n\n# Afficher le graphique interactif\np_interactive\n\n\n\n\n\n\n\n\nDay 7 : Hazards\n\n\nShow the code\nlibrary(rworldmap)\nlibrary(readr)\n\n# Data settings\nwildfires &lt;- read_csv(\"../Rwork/30DayChartChallenge/wildfires.csv\")\nwildfires2023_na &lt;-wildfires[wildfires$Year==2023,]\nwildfires2023 &lt;- wildfires2023_na[complete.cases(wildfires2023_na), ]\n\n\ncolnames(wildfires2023)[4]&lt;-\"AreaBurnt\"\nwildfires2023$logArea&lt;-log(wildfires2023$AreaBurnt+1)\nwildfires23&lt;-wildfires2023[-which(wildfires2023$logArea&lt;0.1),]\n\ncolour_fire = c(\"#FFFF00\",\"#FFD700\",\"#FFA500\",\"#FF8C00\",\"#E66608\",\"#D14209\",\"#C40A0A\",\"#8E0B0B\")\n\n# Join wildfire data with spatial data\nsPDF &lt;- joinCountryData2Map(wildfires23,\n                            , joinCode = \"ISO3\"\n                            , nameJoinColumn = \"Code\")\n\n\n\n\nShow the code\n# Create map\nmapCountryData(sPDF,nameColumnToPlot='logArea', \n               colourPalette= colour_fire, \n               catMethod=\"pretty\", \n               mapTitle = \"Wilfires in the World 2023\",\n               xlim = NA,\n               ylim = NA,\n               oceanCol = NA,\n               lwd = 0.5, \n               addLegend = TRUE)\n\n\n\n\n\n\n\n\n\nData from : https://ourworldindata.org/wildfires\n\n\nDay 8 : Circular\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(tidyr)\nlibrary(dplyr)\n# Data preparation\ntemperature &lt;- data.frame(\nAnnée = c(\"2024\", \"2023\", \"2022\", \"2021\", \"2020\", \"2019\", \"2018\", \"2017\", \"2016\", \"2015\", \"2014\"),\nMoyenne = c(6.1, 14.4, 14.5, 12.9, 14.1, 13.7, 13.9, 13.4, 13.1, 13.6, 13.8),\nJanvier = c(9.6, 6.3, 5.0, 4.9, 7.1, 4.6, 8.4, 3.1, 7.1, 5.6, 7.6),\nFévrier = c(10.6, 6.9, 8.1, 8.2, 9.3, 8.0, 3.5, 8.2, 7.3, 4.9, 7.9),\nMars = c(12.4, 10.2, 9.9, 8.9, 9.4, 10.1, 8.2, 11.0, 8.0, 9.1, 9.8),\nAvril = c(15.5, 11.8, 11.8, 10.4, 14.1, 11.7, 13.8, 11.4, 11.1, 12.6, 13.0),\nMai = c(NA, 16.2, 17.8, 13.8, 16.5, 13.9, 16.3, 16.5, 15.0, 15.5, 14.7),\nJuin = c(NA, 21.5, 21.2, 20.3, 18.6, 20.1, 20.1, 21.2, 18.7, 19.8, 19.6),\nJuillet = c(NA, 21.9, 23.2, 20.7, 21.6, 23.0, 23.2, 21.7, 21.3, 22.8, 20.6),\nAoût = c(NA, 22.0, 23.7, 20.0, 22.6, 21.8, 22.3, 21.5, 21.5, 21.6, 19.1),\nSeptembre = c(NA, 21.1, 18.2, 19.3, 19.0, 18.5, 19.0, 16.4, 19.7, 16.4, 18.9),\nOctobre = c(NA, 16.4, 17.2, 13.5, 13.0, 15.1, 14.4, 14.9, 12.6, 12.7, 15.9),\nNovembre = c(NA, 10.1, 10.9, 7.9, 10.5, 8.8, 9.6, 8.2, 8.8, 11.2, 11.3),\nDécembre = c(NA, 8.0, 6.7, 6.9, 6.9, 8.1, 7.7, 5.9, 5.6, 9.5, 6.3)\n)\n# Reshape data to long format\ntemperature_long &lt;- temperature %&gt;%\npivot_longer(cols = Janvier:Décembre, names_to = \"Month\", values_to = \"Temperature\")\n# Ensure Month is a factor with the correct order\ntemperature_long$Month &lt;- factor(temperature_long$Month, levels = c(\"Janvier\", \"Février\", \"Mars\", \"Avril\", \"Mai\", \"Juin\", \"Juillet\", \"Août\", \"Septembre\", \"Octobre\", \"Novembre\", \"Décembre\"))\n# Plot the radial histogram\nggplot(temperature_long, aes(x = Month, y = Temperature, group = Année, fill = Année)) +\ngeom_bar(stat = \"identity\", position = \"dodge\", width = 0.8) +\ncoord_polar() +\ntheme_minimal() +\nlabs(title = \"Radial Histogram of Monthly Temperatures\",\nx = \"\",\ny = \"Temperature (°C)\",\nfill = \"Year\") +\ntheme(axis.text.x = element_text(size = 8),\naxis.title.y = element_text(size = 10))\n\n\n\n\n\n\n\n\n\n\n\nDay 9 : Major / Minor\n\n\nShow the code\n# Load necessary libraries\nlibrary(tidyr)\nlibrary(dplyr)\nlibrary(ggplot2)\n\n# Simulate reading the Excel file\n# temp &lt;- read_excel(\"./Paris.xlsx\")\n# Since the actual file is not provided, we'll create the dataframe manually based on the provided structure.\n\ntemp &lt;- data.frame(\n    Month = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\", \"Year\"),\n    `Record high °C` = c(16.1, 21.4, 26.0, 30.2, 34.8, 37.6, 42.6, 39.5, 36.2, 28.9, 21.6, 17.1, 42.6),\n    `Daily mean °C` = c(5.4, 6.0, 9.2, 12.2, 15.6, 18.8, 20.9, 20.8, 17.2, 13.2, 8.7, 5.9, 12.8),\n    `Record low °C` = c(-14.6, -14.7, -9.1, -3.5, -0.1, 3.1, 6.0, 6.3, 1.8, -3.8, -14.0, -23.9, -23.9)\n)\n\n# Reshape the data to long format\ntemp_long &lt;- temp %&gt;%\n    pivot_longer(cols = -Month, names_to = \"Temperature Type\", values_to = \"Temperature\")\n\n# Remove the 'Year' row as it doesn't represent a specific month\ntemp_long &lt;- temp_long %&gt;%\n    filter(Month != \"Year\")\n\n# Convert Month to a factor with the correct order\ntemp_long$Month &lt;- factor(temp_long$Month, levels = c(\"Jan\", \"Feb\", \"Mar\", \"Apr\", \"May\", \"Jun\", \"Jul\", \"Aug\", \"Sep\", \"Oct\", \"Nov\", \"Dec\"))\n\n# Plot the data\np &lt;- ggplot(data = temp_long, aes(x = Month, y = Temperature, color = `Temperature Type`, group = `Temperature Type`)) +\n    geom_point() +\n    geom_smooth(se = FALSE) +\n    labs(title = \"Temperature Trends in Paris\",\n         x = \"Month\",\n         y = \"Temperature (°C)\",\n         color = \"Temperature Type\") +\n    theme_minimal()\n\nprint(p)\n\n\n\n\n\n\n\n\n\n\n\nDay 10 : Physical\n\n\nShow the code\nlibrary(ggplot2)\nlibrary(plotly)\n\n# Loading data with read_csv()\nphysical = read_csv(\"../Rwork/30DayChartChallenge/physical-integrity-rights-index-population-weighted.csv\")\n\n# Modify column name to prepare the ploting\ncolnames(physical)[4] = \"index\"\n\n# Create plot\nplot_physical &lt;- ggplot(data = physical, aes(x = Year, y = index, group = Entity, color = Entity)) +\n  geom_line() + \n  labs(title = \"Physical integrity rights index\",\n       x = \"Year\",\n       y = \"Physical violence index\",\n       color = \"Country\") +\n  theme_minimal()\n\n#plot_physical\n# Convert plot to plotly to make it interactive\nplotly_physical &lt;- ggplotly(plot_physical)\n\n# Print the interactive plot\nplotly_physical\n\n\n\n\n\n\nSource : https://ourworldindata.org/grapher/physical-integrity-rights-index-population-weighted?time=earliest..2023\n\n\nDay 11 : Mobile Friendly\n\n\nShow the code\n# Load the library\nlibrary(ggplot2)\n\n# Create data for each age group\nyears &lt;- c(2011, 2016, 2022)\nage_1_6 &lt;- c(12.29, 14.15, 14.21)\nage_7_12 &lt;- c(19.58, 20.27, 24.41)\nage_13_19 &lt;- c(30.23, 32.6, 36.08)\n\n# Create a data frame for each age group\nscreentime_1_6 &lt;- data.frame(\n  year = years,\n  duration = age_1_6,\n  age_group = rep(\"1-6 years\", length(years))\n)\n\nscreentime_7_12 &lt;- data.frame(\n  year = years,\n  duration = age_7_12,\n  age_group = rep(\"7-12 years\", length(years))\n)\n\nscreentime_13_19 &lt;- data.frame(\n  year = years,\n  duration = age_13_19,\n  age_group = rep(\"13-19 years\", length(years))\n)\n\n# Combine the data frames into one\nscreentime &lt;- rbind(screentime_1_6, screentime_7_12, screentime_13_19)\n\n# Create the plot using ggplot2\np &lt;- ggplot(screentime, aes(x = year, y = duration, color = age_group, group = age_group)) +\n  geom_line(size = 1) +\n  geom_point(size = 2) +\n  annotate(\"text\", x = screentime$year, y = screentime$duration + 0.5, \n           label = paste(round(screentime$duration, 2), \"h\"), \n           vjust = -0.5, size = 3, color = \"black\") +  # Add annotations just above the points\n  scale_color_manual(values = c(\"1-6 years\" = \"#FDBF6F\", \"7-12 years\" = \"#B2DF8A\", \"13-19 years\" = \"#A6CEE3\")) +  \n  scale_x_continuous(breaks = seq(2012, 2022, by = 1)) +\n  scale_y_continuous(breaks = seq(0, max(screentime$duration), by = 5)) +  # Set y-axis labels every 5 hours\n  labs(\n    title = \"Evolution of weekly screen time for children and adolescents in France\",\n    x = \"Years\",\n    y = \"Duration in hours\",\n    color = \"Age groups\"\n  ) +\n  theme_bw() +\n  theme(\n    plot.title = element_text(hjust = 0.5),\n    axis.text.x = element_text(angle = 45, hjust = 1)\n  )\n\nprint(p)  # Display the plot\n\n\n\n\n\n\n\n\n\nSource : https://fr.statista.com/statistiques/1414345/duree-utilisation-ecran-france-jeunes/\n\n\nDay 12 : Reuters Graphic\n\n\nShow the code\n# Load necessary libraries\nlibrary(rworldmap)\nlibrary(dplyr)\n# Create data frame\ndata &lt;- data.frame(\ncountry = c(\"Algeria\", \"Angola\", \"Benin\", \"Botswana\", \"Burkina Faso\", \"Burundi\",\n\"Cabo Verde\", \"Cameroon\", \"Central African Republic\", \"Chad\", \"Comoros\",\n\"Côte d'Ivoire\", \"Democratic Republic of the Congo\", \"Djibouti\", \"Egypt\",\n\"Equatorial Guinea\", \"Eritrea\", \"Eswatini\", \"Ethiopia\", \"Gabon\", \"Gambia\",\n\"Ghana\", \"Guinea\", \"Guinea-Bissau\", \"Kenya\", \"Lesotho\", \"Liberia\", \"Libya\",\n\"Madagascar\", \"Malawi\", \"Mali\", \"Mauritania\", \"Mauritius\", \"Morocco\",\n\"Mozambique\", \"Namibia\", \"Niger\", \"Nigeria\", \"Rwanda\", \"São Tomé and Príncipe\",\n\"Senegal\", \"Seychelles\", \"Sierra Leone\", \"Somalia\", \"South Africa\",\n\"South Sudan\", \"Sudan\", \"Tanzania\", \"Togo\", \"Tunisia\", \"Uganda\", \"Zambia\",\n\"Zimbabwe\"),\ncriminalisation = c(\"De facto criminalisation\", \"No criminalisation\", \"No criminalisation\",\n\"No criminalisation\", \"No criminalisation\", \"Up to 8 years imprisonment\",\n\"No criminalisation\", \"Up to 8 years imprisonment\", \"Up to 8 years imprisonment\",\n\"Up to 8 years imprisonment\", \"Up to 8 years imprisonment\", \"No criminalisation\",\n\"No criminalisation\", \"No criminalisation\", \"De facto criminalisation\",\n\"No criminalisation\", \"Up to 8 years imprisonment\", \"No criminalisation\",\n\"Up to 8 years imprisonment\", \"No criminalisation\", \"10 years to life in prison\",\n\"Up to 8 years imprisonment\", \"10 years to life in prison\", \"No criminalisation\",\n\"Up to 8 years imprisonment\", \"No criminalisation\", \"Up to 8 years imprisonment\",\n\"De facto criminalisation\", \"No criminalisation\", \"Up to 8 years imprisonment\",\n\"No criminalisation\", \"Death Penalty\", \"Up to 8 years imprisonment\",\n\"Up to 8 years imprisonment\", \"No criminalisation\", \"No criminalisation\",\n\"No criminalisation\", \"Death Penalty (possible)\", \"No criminalisation\",\n\"No criminalisation\", \"10 years to life in prison\", \"No criminalisation\",\n\"Up to 8 years imprisonment\", \"Death Penalty\", \"No criminalisation\",\n\"De facto criminalisation\", \"Death Penalty (possible)\", \"Up to 8 years imprisonment\",\n\"Up to 8 years imprisonment\", \"Up to 8 years imprisonment\",\n\"Death Penalty (possible)\", \"Up to 8 years imprisonment\",\n\"Up to 8 years imprisonment\")\n)\n# Convert 'criminalisation' column to factor with specified levels\ndata$criminalisation &lt;- factor(data$criminalisation, levels = c(\"No criminalisation\",\n\"De facto criminalisation\",\n\"Up to 8 years imprisonment\",\n\"10 years to life in prison\",\n\"Death Penalty (possible)\",\n\"Death Penalty\"))\n# Define a vector of colors\ncolour_criminalisation &lt;- c(\"white\", \"#FFECB3\", \"#FFCC80\", \"#FF8A65\", \"#F4511E\", \"#B71C1C\")\n# Join the data frame with the map data\nsPDF &lt;- joinCountryData2Map(data,\njoinCode = \"NAME\",\nnameJoinColumn = \"country\")\n\n\n\n\nShow the code\n# Plot the map\nmapCountryData(sPDF,\nnameColumnToPlot = 'criminalisation',\ncolourPalette = colour_criminalisation,\ncatMethod = \"categorical\",\nmapTitle = \"Criminalisation of consensual same-sex sexual acts in Africa (2024)\",\nxlim = c(-20, 60),\nylim = c(-35, 40),\noceanCol = \"#EBF5FB\",\nlwd = 0.5,\naddLegend = FALSE)  # Disable default legend\n# Manually add a smaller legend on the side\nlegend(\"bottomleft\", legend = levels(data$criminalisation), fill = colour_criminalisation, bty = \"n\", cex = 0.8)\n\n\n\n\n\n\n\n\n\nInspired by :#https://www.reuters.com/graphics/UGANDA-LGBT/movakykrjva/ and data from : https://database.ilga.org/criminalisation-consensual-same-sex-sexual-acts\n\n\nDay 13 : Family\n\n\nShow the code\nlibrary(ggraph)\nlibrary(igraph)\nfirst_name = c(NA , \"Agnes\", \"Vincent\", \"Susan\", \"Henri\", \"Anne-Marie\", \"Serge\", \"Sonia\", \"Peter\", \"Simone\", \"Andre\", \"George\", \"mama Papi\", \"one Nanie\", \"two Nanie\", \"Lia\", \"Thais\", \"Olivier\",\n               \"Joseph\", \"Sara\", \"Lucette\", \"Me\", NA, NA, NA, NA, \"Marie-Laure\", \"Antoine\", \"Arthur\", NA, \"Eric\", NA, \"Johnny\", \"Camille\",\n               \"Albin\", \"Nina\", \"Isabelle\", NA, \"Laurie\", \"Iris\", \"Pierrick\", NA, \"Julie\", \"Arsene\", \"Robin\", \"?\", NA, \"Laura\", \"Helios\", NA,\n               \"Betty\", \"Vasya\", NA, \"Gerard\", \"Florence\", \"Sandrine\", NA, \"Pierre\", \"Luna\", \"Nina\", \"Nathan\", NA, \"Pere vic et clo\", \"Victor\", \"Clotilde\", NA, \"Alain\", \"Bastien\", \"Simon\", \"Jeanne\", \"Marie\", NA,\n               \"Rebecca\", \"Mael\", \"Soan\", NA, \"Aurelien\", \"Haldora\", \"Lilas\", NA, \"Maman Mamo\", \"Louis\", NA, \"Manou\",\n               \"Linette\", \"Annie\", NA, \"Serge\", \"Fabienne\", \"Alain\", \"Jean-Yves\", NA, \"Olivier\", \"Lola\", \"Jeanne\", NA, \"Agnes\", \"Charlotte\",\n               \"Elsa\", NA, \"Martine\", \"Guillaume\", \"Melanie\", NA, \"Basile\", \"Charlie\", \"Mae\", NA, \"Marie\", \"?\", NA,\n               \"Jacques\", \"Cecile\", \"Paul\", \"Jacques\", \"Mimi (Marie-Blanche)\", NA) \nnodes&lt;-data.frame(name=1:117)\nedges &lt;- data.frame(\nfrom = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 2, 5, 4, 3, 28, 29, 27, 5,\n         4, 31, 33, 34, 35, 36, 37, 18, 28, 39, 40, 41, 29, 43, 44, 45, 46, 19, 48, 49, 19, 51, 52, 21, 54, 55, 56, 55, 58, 59, 60, 61, 56, 63, 64, 65,\n         20, 67, 68, 69, 70, 71, 73, 74, 75, 69, 70, 77, 79, 78, 81, 82, 10, 84, 82, 86, 85, 85, 88, 89, 90, 91, 89, 93, 94, 95,\n         90, 97, 98, 99, 91, 101, 102, 103, 102, 109, 110, 103, 105, 106, 107, 112, 113, 114, 115, 8, 116),\nto = c(1, 1, 23, 23, 26, 26, 25, 25, 24, 24, 6, 6, 7, 7, 1, 1, 26, 23, 25, 24, 1, 23, 24, 25, 26, 30, 30, 30, 30,\n       32, 32, 32, 32, 38, 38, 38, 38, 42, 42, 42, 42, 47, 47, 47, 47, 47, 50, 50, 50, 53, 53, 53, 57, 57, 57, 57, 62, 62, 62, 62, 62, 66, 66, 66, 66,\n       72, 72, 72, 72, 72, 72, 76, 76, 76, 76, 80, 80, 80, 80, 83, 83, 83, 87, 87, 87, 87, 92, 92, 92, 92, 92, 96, 96, 96, 96,\n       100, 100, 100, 100, 104, 104, 104, 104, 111, 111, 111, 108, 108, 108, 108, 117, 117, 117, 117, 117, 117)\n)\n\nheight&lt;-c(2, 3, 3, 5, 5, 5, 5, 7, 7, 7, 7, 7, 7, 7, 7, 1, 1, 3, 3, 5, \n          5, 1, 4, 6, 6, 4, 5, 3, 3, 4, 5, 4, 3, 3, 1, 1, 3, 2, 3, 1, 1, 2,\n          3, 1, 1, 1, 2, 3, 1, 2, 3, 1, 2, 5, 3, 3, 4, 3, 1, 1, 1, 2, 3, 1, 1, 2, 5, 3, 3, 3, 3, 4, 3, 1, 1, 2, 3, 1, 1, 2,\n          9, 9, 8, 9, 7, 7, 8, 7, 5, 5, 5, 6, 5, 3, 3, 4, 5, 3, 3, 4, 5, 3, 3, 4, 3, 1, 1, 2, 3, 1, 2, 9, 9, 7, 7, 7, 8)\n\ng &lt;- graph_from_data_frame(edges, vertices = nodes, directed = TRUE)\n\nlext&lt;-create_layout(g,layout='kk')\n\n\nlext[,2]=height\n\nggraph(g, layout = lext) +\n  geom_edge_link() +\n  geom_node_point() +\n  geom_node_label(aes(label=first_name), size = 3, alpha = 0.9, \n                  color = \"#8856a7\",repel=TRUE) +\n  theme_void()\n\n\n\n\n\n\n\n\n\n\n\nShow the code\nlibrary(visNetwork)\nlibrary(igraph)\n# Define nodes and edges\nfirst_name = c(NA , \"Agnes\", \"Vincent\", \"Susan\", \"Henri\", \"Anne-Marie\", \"Serge\", \"Sonia\", \"Peter\", \"Simone\", \"Andre\", \"George\", \"mama Papi\", \"one Nanie\", \"two Nanie\", \"Lia\", \"Thais\", \"Olivier\",\n\"Joseph\", \"Sara\", \"Lucette\", \"Me\", NA, NA, NA, NA, \"Marie-Laure\", \"Antoine\", \"Arthur\", NA, \"Eric\", NA, \"Johnny\", \"Camille\",\n\"Albin\", \"Nina\", \"Isabelle\", NA, \"Laurie\", \"Iris\", \"Pierrick\", NA, \"Julie\", \"Arsene\", \"Robin\", \"?\", NA, \"Laura\", \"Helios\", NA,\n\"Betty\", \"Vasya\", NA, \"Gerard\", \"Florence\", \"Sandrine\", NA, \"Pierre\", \"Luna\", \"Nina\", \"Nathan\", NA, \"Pere vic et clo\", \"Victor\", \"Clotilde\", NA, \"Alain\", \"Bastien\", \"Simon\", \"Jeanne\", \"Marie\", NA,\n\"Rebecca\", \"Mael\", \"Soan\", NA, \"Aurelien\", \"Haldora\", \"Lilas\", NA, \"Maman Mamo\", \"Louis\", NA, \"Manou\",\n\"Linette\", \"Annie\", NA, \"Serge\", \"Fabienne\", \"Alain\", \"Jean-Yves\", NA, \"Olivier\", \"Lola\", \"Jeanne\", NA, \"Agnes\", \"Charlotte\",\n\"Elsa\", NA, \"Martine\", \"Guillaume\", \"Melanie\", NA, \"Basile\", \"Charlie\", \"Mae\", NA, \"Marie\", \"?\", NA,\n\"Jacques\", \"Cecile\", \"Paul\", \"Jacques\", \"Mimi (Marie-Blanche)\", NA)\nnodes &lt;- data.frame(id = 1:117, label = first_name)\nedges &lt;- data.frame(\nfrom = c(2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 2, 5, 4, 3, 28, 29, 27, 5,\n4, 31, 33, 34, 35, 36, 37, 18, 28, 39, 40, 41, 29, 43, 44, 45, 46, 19, 48, 49, 19, 51, 52, 21, 54, 55, 56, 55, 58, 59, 60, 61, 56, 63, 64, 65,\n20, 67, 68, 69, 70, 71, 73, 74, 75, 69, 70, 77, 79, 78, 81, 82, 10, 84, 82, 86, 85, 85, 88, 89, 90, 91, 89, 93, 94, 95,\n90, 97, 98, 99, 91, 101, 102, 103, 102, 109, 110, 103, 105, 106, 107, 112, 113, 114, 115, 8, 116),\nto = c(1, 1, 23, 23, 26, 26, 25, 25, 24, 24, 6, 6, 7, 7, 1, 1, 26, 23, 25, 24, 1, 23, 24, 25, 26, 30, 30, 30, 30,\n32, 32, 32, 32, 38, 38, 38, 38, 42, 42, 42, 42, 47, 47, 47, 47, 47, 50, 50, 50, 53, 53, 53, 57, 57, 57, 57, 62, 62, 62, 62, 62, 66, 66, 66, 66,\n72, 72, 72, 72, 72, 72, 76, 76, 76, 76, 80, 80, 80, 80, 83, 83, 83, 87, 87, 87, 87, 92, 92, 92, 92, 92, 96, 96, 96, 96,\n100, 100, 100, 100, 104, 104, 104, 104, 111, 111, 111, 108, 108, 108, 108, 117, 117, 117, 117, 117, 117)\n)\n# Create the interactive network graph\nvisNetwork(nodes, edges) %&gt;%\nvisOptions(highlightNearest = TRUE, nodesIdSelection = TRUE) %&gt;%\nvisPhysics(stabilization = FALSE)\n\n\n\n\n\n\n\n\nDay 14 : Heatmap\n\n\nShow the code\nlibrary(geosphere)\nlibrary(ggplot2)\nlibrary(reshape2)\n\n# Define the coordinates (latitude and longitude) for each capital\ncapitals &lt;- data.frame(\ncity = c(\"London\", \"Paris\", \"Berlin\", \"Madrid\", \"Rome\", \"Vienna\", \"Amsterdam\",\n\"Brussels\", \"Warsaw\", \"Prague\", \"Lisbon\", \"Athens\", \"Budapest\",\n\"Stockholm\", \"Copenhagen\", \"Dublin\"),\nlat = c(51.5074, 48.8566, 52.5200, 40.4168, 41.9028, 48.2082, 52.3676,\n50.8503, 52.2297, 50.0755, 38.7167, 37.9838, 47.4979, 59.3293,\n55.6761, 53.3498),\nlon = c(-0.1278, 2.3522, 13.4050, -3.7038, 12.4964, 16.3738, 4.9041,\n4.3517, 21.0122, 14.4378, -9.1393, 23.7275, 19.0402, 18.0686,\n12.5683, -6.2603)\n)\n\n# Calculate the distance matrix\ndistance_matrix &lt;- distm(capitals[, c(\"lon\", \"lat\")], fun = distHaversine) / 1000  # Convert to kilometers\n\n# Convert distance matrix to a data frame for plotting\ndistance_df &lt;- as.data.frame(as.table(as.matrix(distance_matrix)))\nnames(distance_df) &lt;- c(\"Capital1\", \"Capital2\", \"Distance\")\ndistance_df$Capital1 &lt;- factor(distance_df$Capital1, labels=capitals$city)\ndistance_df$Capital2 &lt;- factor(distance_df$Capital2, labels=capitals$city)\n\n# Plot the heatmap\nheatmap = ggplot(distance_df, aes(Capital1, Capital2, fill = Distance)) +\ngeom_tile(color = \"black\") +\nscale_fill_gradientn(colors = c(\"blue\", \"white\", \"yellow\", \"orange\", \"red\")) +\ntheme_minimal() +\nlabs(title = \"Distance Between Major European Capitals (in km)\",\nx = \"\", y = \"\", fill = \"Distance (km)\") +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))\nheatmap\n\n\n\n\n\n\n\n\n\nAdapting graphs for colour blinds\n\n\nShow the code\nlibrary(geosphere)\nlibrary(ggplot2)\nlibrary(reshape2)\n\n# Define the coordinates (latitude and longitude) for each capital\ncapitals &lt;- data.frame(\ncity = c(\"London\", \"Paris\", \"Berlin\", \"Madrid\", \"Rome\", \"Vienna\", \"Amsterdam\",\n\"Brussels\", \"Warsaw\", \"Prague\", \"Lisbon\", \"Athens\", \"Budapest\",\n\"Stockholm\", \"Copenhagen\", \"Dublin\"),\nlat = c(51.5074, 48.8566, 52.5200, 40.4168, 41.9028, 48.2082, 52.3676,\n50.8503, 52.2297, 50.0755, 38.7167, 37.9838, 47.4979, 59.3293,\n55.6761, 53.3498),\nlon = c(-0.1278, 2.3522, 13.4050, -3.7038, 12.4964, 16.3738, 4.9041,\n4.3517, 21.0122, 14.4378, -9.1393, 23.7275, 19.0402, 18.0686,\n12.5683, -6.2603)\n)\n\n# Calculate the distance matrix\ndistance_matrix &lt;- distm(capitals[, c(\"lon\", \"lat\")], fun = distHaversine) / 1000  # Convert to kilometers\n\n# Convert distance matrix to a data frame for plotting\ndistance_df &lt;- as.data.frame(as.table(as.matrix(distance_matrix)))\nnames(distance_df) &lt;- c(\"Capital1\", \"Capital2\", \"Distance\")\ndistance_df$Capital1 &lt;- factor(distance_df$Capital1, labels=capitals$city)\ndistance_df$Capital2 &lt;- factor(distance_df$Capital2, labels=capitals$city)\n\n# Plot the heatmap\nheatmap_viridis = ggplot(distance_df, aes(Capital1, Capital2, fill = Distance)) +\ngeom_tile(color = \"black\") +\nscale_fill_viridis() +\ntheme_minimal() +\nlabs(title = \"Distance Between Major European Capitals (in km)\",\nx = \"\", y = \"\", fill = \"Distance (km)\") +\ntheme(axis.text.x = element_text(angle = 45, hjust = 1))\nheatmap_viridis\n\n\n\n\n\n\n\n\n\n\n\nDay 15 : Historical\nAviation data from 1990 : https://ourworldindata.org/global-aviation-emissions\n\n\nShow the code\n# Load required libraries\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(patchwork)\n\n# Read the data\naviation = read.csv(\"../Rwork/30DayChartChallenge/aviation.csv\")\n\n# Line plot for Passenger Demand\na = ggplot(aviation, aes(x = Year, y = `Passenger.demand`, group = 1)) +\n  geom_line() +\n  labs(title = \"Passenger Demand Over Time\", x = \"Year\", y = \"Passenger Demand\") +\n  theme_minimal()\n\n# Bar plot of Freight Demand Over Time\nb = ggplot(aviation, aes(x = Year, y = `Freight.demand`)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  labs(title = \"Freight Demand Over Time (million-ton km)\", x = \"Year\", y = \"Freight Demand\") +\n  theme_minimal()\n\n#Scatter Plot of Carbon Intensity vs. Year\nc &lt;- ggplot(aviation, aes(x = Year, y = `Carbon.intensity`)) +\n  geom_point(aes(color = `Carbon.per.unit.energy`), size = 2) +\n  labs(title = \"Scatter Plot of Carbon Intensity vs. Year\", x = \"Year\", y = \"Carbon Intensity (gCO₂ per passenger-km)\") +\n  scale_color_gradient(low = \"lightblue\", high = \"darkblue\") + \n  theme_minimal()\n\n# Line plot for CO2 Emissions\nd = ggplot(aviation, aes(x = Year, y = `CO2.emissions`)) +\n  geom_line(color = \"black\") +\n  labs(title = \"CO2 Emissions Over Time\", x = \"Year\", y = \"CO2 Emissions\") +\n  theme_minimal()\n\na + b + c + d\n\n\n\n\n\n\n\n\n\n\n\nDay 16 : Weather\nTwo ways of viewing the same data :\n\n\nShow the code\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(patchwork)\n\ndisaster = read_csv(\"../Rwork/30DayChartChallenge/natural-disasters-by-type.csv\")\n\nplot_disaster &lt;- ggplot(data = disaster, aes(x = Year, y = Disasters, group = Entity, color = Entity)) + \n  geom_line() + \n  labs(title = \"Number of recorded natural disaster events, 1900 to 2024\",\n       x = \"Year\",\n       y = \"\",\n       color = \"Disasters\") + \n  theme_minimal() + theme(legend.position = \"none\")\nplot_disaster1 = ggplotly(plot_disaster)\n\n#stacked bar plot\ndisasterr = disaster[-(1:165),]\npastel_colors &lt;- c(\"#FBB4AE\", \"#E5D8BD\", \"#CCEBC5\", \"#DECBE4\", \"#FED9A6\", \"#B3CDE3\", \"#B3E2CD\", \"#FDCDAC\", \"#CBD5E8\", \"#F4CAE4\")\n\nplot_disasterr &lt;- ggplot(data = disasterr, aes(x = Year, y = Disasters, group = Entity, fill = Entity)) + \n  geom_bar(stat = \"identity\", position = \"stack\") + \n  scale_fill_manual(values = pastel_colors )\n  labs(x = \"Year\", y = \"\") +\n    theme_minimal()\n\n\n\n\nShow the code\nplot_disasterr\n\n\n\n\n\n\n\n\n\nShow the code\nplot_disaster1\n\n\n\n\n\n\nShow the code\n#plot_disasterr / plot_disaster+ theme(legend.position = \"left\") + plot_annotation(title = 'Number of recorded natural disaster events, 1900 to 2024 ')\n\n\n\n\nDay 17 : Network\nNetwork graph using the distance between cities.\n\n\nShow the code\n#Make the graph with k=3 nearest neighbors\nlibrary(ggraph)\nlibrary(igraph)\nlibrary(tidyverse)\nlibrary(tidygraph)\n\n# install.packages(\"FastKNN\")\nmateuro&lt;-as.matrix(eurodist)\nn=ncol(mateuro)\nlibrary(FastKNN)\nk=3\nnn = matrix(0,n,k) # n x k\nfor (i in 1:n)\n  nn[i,] = k.nearest.neighbors(i, mateuro, k = k)\nnngraph&lt;-matrix(0,ncol=n,nrow=n)\nfor (i in 1:n){\n  nngraph[i,nn[i,]]=1\n}\nig&lt;-graph_from_adjacency_matrix(nngraph,mode = \"undirected\")\nV(ig)$name&lt;-rownames(mateuro)\n\ncoords&lt;-cmdscale(eurodist,k=2)\nlayg&lt;-graph_from_adjacency_matrix(mateuro,weighted=TRUE)\n\n\ngraph1 &lt;- as_tbl_graph(ig)\n\nggraph(graph1,layout=coords) +\n  geom_edge_link(aes(colour = \"red\")) +\n  geom_node_point()+\n  geom_node_label(aes(label=rownames(mateuro)),repel=TRUE) +\n  labs(title = \"Graph of the three nearest neighbours\") +\n  theme_void() + \n  theme(legend.position = \"none\") \n\n\n\n\n\n\n\n\n\n\n\nDay 18 : Asian Develmt Bank\n\n\nShow the code\n# Load libraries\nlibrary(ggplot2)\n\n# Prepare the data\naus&lt;-readRDS(\"../Rwork/30DayChartChallenge/Aussie2.rds\")\naust=t(aus)\naust=as.data.frame(aust)\n\n#Create the plot \nCloth_Alcohol_correlation = ggplot(aust,aes(x=Alcohol_Tobacco_drugs,y=Clothing_footwear))+\n  geom_point(aes(col=Year), size = 2) +\n  scale_colour_gradient(low = \"lightblue\", high = \"darkgreen\") +\n  labs(title = \"Price of clothing and alcohol in Australia\", x = \"Alcohol, Tabacco and drugs\", y = \"Clothing and footwear\") +\n  geom_label(aes(x = 115, y = 102, label = \"Negative correlation = -0.84\"), color = \"black\", fill = \"white\", size = 3.5, hjust = 0) +\n  theme_bw()\n\nCloth_Alcohol_correlation\n\n\n\n\n\n\n\n\n\nFrom the ADB Bank : https://data.adb.org/dataset/australia-key-indicators\n\n\nDay 19 : Dinosaurs\nReference to Anscombe’s quartet that shows the importance of looking at the scatter plot graph, and not only the statistics like correlation or mean !\n\n\nShow the code\n# Load the libraries\nlibrary(datasauRus)\nlibrary(ggplot2)\nlibrary(dplyr)\n\n# Define color palette\ncolors &lt;- c(\"dino\" = \"#FF9999\", \"bullseye\" = \"#FFCC99\", \"star\" = \"#FFFF99\", \"slant_up\" = \"#99FF99\")\n\n# Filter the datasets from the datasaurus_dozen\ndatasets &lt;- datasaurus_dozen %&gt;%\n  filter(dataset %in% c(\"dino\", \"bullseye\", \"star\", \"slant_up\"))\n\n# Create the plots\nggplot(datasets, aes(x = x, y = y, color = dataset)) +\n  geom_point() +\n  scale_color_manual(values = colors) +\n  facet_wrap(~ dataset) +\n  theme_minimal() +\n  labs(title = \"Datasaurus Dozen\",\n       x = \"X\",\n       y = \"Y\") +\n  theme(legend.position = \"none\", plot.title = element_text(hjust = 0.5))\n\n\n\n\n\n\n\n\n\n\n\nDay 20 : Correlation\nZooming in the correlation of Data from ABD Day 18 in Australia:\n\n\nShow the code\nlibrary(pheatmap)\nlibrary(ggplot2)\n\n#Create data frame out of the ADB data of Australia already used before\naustralia = aust[,c(1,4,20,32,33,29,30,36,37,38,41,45)]\n\n# You can already see the correlation matrix with round(cor(australia),2)\n\n# 3 different heatmaps\nAus1 = pheatmap(cor(australia))\n\n\n\n\n\n\n\n\n\nShow the code\naus2&lt;-australia[,-c(5,10)]\nAus2 = pheatmap(cor(aus2))\n\n\n\n\n\n\n\n\n\nShow the code\naus3&lt;-australia[,-c(5,6,10,12,11,9)]\nAus3 = pheatmap(cor(aus3))\n\n\n\n\n\n\n\n\n\nShow the code\n# Observation : We see that the biggest correlation is between the money invested in Health and the total population which is normal because the more there is humans the more we need money in Health\n\n\n\n\n\nhttps://www.cedricscherer.com/2024/04/01/contributions-30daychartchallenge-2024/"
  }
]